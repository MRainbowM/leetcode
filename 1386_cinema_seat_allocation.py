# https://leetcode.com/problems/cinema-seat-allocation

"""
1386. Cinema Seat Allocation
Распределение мест в кинотеатре

В кинотеатре есть n ряды сидений,
пронумерованные от 1 до 10 n,
в каждом ряду по десять сидений,
пронумерованных от 1 до 10, как показано на рисунке выше.

Например, если массив reservedSeats содержит номера уже зарезервированных мест,
reservedSeats[i] = [3,8] то это означает,
что место, расположенное в ряду 3 и помеченное цифрой 8, уже зарезервировано.

Верните максимальное количество групп из четырех человек,
которые вы можете назначить на места в кинотеатре.
Группа из четырех человек занимает четыре соседних места в одном ряду.
Места через проход (например, [3,3] и [3,4]) не считаются соседними,
но есть исключительный случай, когда проход разделяет группу из четырех человек,
в этом случае проход разделяет группу из четырех человек посередине,
что означает наличие двух человек с каждой стороны.

Example 1:
Input: n = 3,
reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]
Output: 4
Explanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.

Example 2:
Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]
Output: 2

Example 3:
Input: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]
Output: 4

Constraints:

1 <= n <= 10^9
1 <= reservedSeats.length <= min(10*n, 10^4)
reservedSeats[i].length == 2
1 <= reservedSeats[i][0] <= n
1 <= reservedSeats[i][1] <= 10
All reservedSeats[i] are distinct.
Все reservedSeats[i] они различны.
"""
import collections


class Solution:
    def maxNumberOfFamilies(self, n: int, reservedSeats) -> int:
        """

        """
        result = 0
        reservedSeats.sort()

        # intervals = [[2, 5], [4, 7], [6, 9]]

        exclude_dict = collections.defaultdict(set)

        for row, seat in reservedSeats:
            if 2 <= seat <= 3:
                exclude_dict[row].add(0)
            elif 4 <= seat <= 5:
                exclude_dict[row].add(0)
                exclude_dict[row].add(1)
            elif 6 <= seat <= 7:
                exclude_dict[row].add(1)
                exclude_dict[row].add(2)
            elif 8 <= seat <= 9:
                exclude_dict[row].add(2)

        for row, exclude_set in exclude_dict.items():
            if 0 not in exclude_set:
                result += 1
            if 2 not in exclude_set:
                result += 1
            if exclude_set == {0, 2}:
                result += 1

        free_rows = n - len(exclude_dict)

        return result + free_rows * 2


def maxNumberOfFamilies_v1(self, n: int, reservedSeats) -> int:
    """
    test 36 Time Limit Exceeded
    """
    result = 0
    reservedSeats.sort()

    intervals = [[2, 5], [4, 7], [6, 9]]

    for row in range(1, n + 1):
        start = 0
        for correct_seat in intervals:
            if correct_seat[0] <= start <= correct_seat[1]:
                continue

            is_free = True

            for reserved_seat in reservedSeats:
                if row < reserved_seat[0]:
                    break

                if row == reserved_seat[0]:
                    if correct_seat[0] <= reserved_seat[1] <= correct_seat[1]:
                        is_free = False
                        break

            if is_free:
                result += 1
                start = correct_seat[1]

    return result


def tests():
    solution = Solution()

    result = solution.maxNumberOfFamilies(
        n=104,
        reservedSeats=[[24, 7], [47, 9], [91, 6], [24, 1], [58, 10], [30, 6], [53, 7], [56, 1], [77, 1], [72, 2],
                       [15, 10], [96, 8], [94, 2], [85, 6], [101, 1], [79, 7], [78, 4], [95, 3], [12, 7], [18, 1],
                       [83, 9], [69, 2], [100, 1], [49, 4], [75, 7], [99, 8], [88, 3], [19, 4], [73, 7], [50, 5],
                       [61, 6], [11, 5], [17, 5], [72, 9], [14, 5], [6, 4], [88, 1], [88, 8], [67, 3], [67, 7], [65, 4],
                       [92, 10], [80, 9], [29, 8], [8, 4], [85, 7], [75, 3], [99, 1], [24, 6], [78, 9], [63, 3],
                       [23, 4], [101, 6], [36, 2], [1, 7], [95, 7], [23, 9], [38, 9], [62, 5], [17, 8], [53, 9],
                       [36, 10], [2, 8], [41, 6], [13, 6], [93, 2], [70, 7], [43, 6], [53, 1], [63, 10], [8, 3],
                       [81, 8], [39, 1], [76, 1], [93, 1], [9, 10], [79, 4], [89, 6], [23, 5], [79, 2], [5, 9], [51, 2],
                       [16, 9], [47, 5], [11, 7], [5, 3], [94, 3], [3, 8], [68, 2], [72, 1], [71, 9], [83, 6], [80, 4],
                       [24, 10], [36, 6], [25, 4], [46, 1], [55, 8], [64, 3], [37, 8], [19, 6], [48, 2], [19, 7],
                       [95, 5], [101, 3], [84, 9], [25, 5], [13, 4], [86, 6], [56, 4], [85, 2], [38, 5], [90, 8],
                       [102, 9], [95, 9], [2, 7], [32, 7], [66, 4], [45, 7], [37, 3], [86, 4], [94, 4], [91, 4],
                       [84, 6], [20, 4], [92, 4], [12, 5], [6, 6], [47, 10], [42, 6], [95, 1], [14, 1], [46, 6],
                       [71, 7], [74, 7], [20, 3], [8, 8], [88, 2], [89, 7], [97, 8], [13, 2], [78, 8], [86, 8], [45, 6],
                       [77, 8], [23, 1], [10, 1], [70, 9], [9, 3], [61, 4], [39, 2], [57, 4], [49, 9], [60, 8], [81, 1],
                       [99, 2], [49, 2], [24, 3], [79, 10], [1, 8], [83, 4], [89, 10], [55, 3], [19, 5], [57, 5],
                       [70, 2], [57, 2], [103, 9], [96, 3], [2, 10], [25, 1], [90, 2], [15, 7], [69, 7], [7, 5],
                       [45, 10], [22, 10], [49, 7], [23, 3], [71, 3], [20, 6], [85, 1], [45, 1], [26, 6], [87, 6],
                       [61, 9], [58, 7], [94, 8], [41, 4], [99, 4], [83, 2], [91, 9], [76, 9], [78, 6], [49, 6],
                       [72, 4], [65, 8], [44, 10], [92, 8], [8, 9], [87, 2], [49, 5], [13, 9], [89, 5], [93, 5],
                       [95, 4], [73, 3], [18, 6], [94, 9], [93, 9], [2, 3], [66, 7], [37, 7], [54, 1], [17, 3], [3, 3],
                       [98, 4], [37, 1], [18, 9], [61, 7], [35, 4], [70, 6], [9, 5], [13, 3], [28, 2], [91, 5], [79, 5],
                       [101, 2], [21, 8], [26, 9], [86, 9], [51, 10], [75, 1], [75, 8], [59, 8], [34, 7], [69, 8],
                       [4, 9], [59, 9], [52, 9], [50, 8], [90, 5], [29, 9], [52, 8], [93, 4], [80, 2], [71, 4], [50, 9],
                       [9, 7], [55, 6], [53, 8], [47, 4], [10, 5], [13, 8], [45, 5], [98, 2], [38, 6], [16, 7], [62, 7],
                       [15, 4], [49, 3], [90, 1], [58, 8], [30, 2], [84, 7], [48, 8], [60, 3], [30, 4], [39, 6],
                       [99, 5], [42, 8], [98, 10], [14, 9], [36, 3], [84, 2], [34, 10], [99, 7], [101, 10], [23, 6],
                       [44, 2], [68, 6], [63, 9], [57, 3], [43, 5], [32, 10], [35, 10], [38, 4], [69, 9], [104, 4],
                       [84, 8], [104, 3], [67, 6], [96, 2], [47, 2], [61, 1], [9, 6], [104, 2], [20, 8], [35, 1],
                       [64, 1], [77, 9], [54, 2], [21, 2], [80, 10], [99, 6], [16, 1], [23, 10], [104, 7], [20, 10],
                       [57, 6], [100, 3], [66, 9], [34, 5], [10, 2], [15, 3], [14, 6], [94, 6], [22, 5], [29, 4],
                       [39, 8], [101, 8], [18, 8], [73, 5], [65, 2], [50, 10], [41, 3], [3, 7], [32, 4], [72, 8],
                       [64, 2], [1, 2], [86, 7], [58, 6], [84, 4], [25, 6], [8, 10], [102, 2], [6, 3], [101, 4],
                       [12, 8], [85, 3], [11, 6], [57, 7], [4, 3], [43, 7], [71, 1], [85, 9], [59, 2], [102, 1],
                       [71, 5], [53, 5], [50, 4], [15, 1], [40, 1], [92, 3], [62, 9], [102, 7], [78, 2], [15, 8],
                       [31, 2], [7, 6], [97, 2], [52, 1], [88, 9], [82, 3], [90, 6], [85, 8], [64, 10], [81, 5],
                       [25, 8], [97, 5], [101, 5], [20, 9], [79, 1], [47, 7], [68, 4], [20, 1], [100, 5], [103, 4],
                       [62, 4], [68, 1], [87, 9], [39, 4], [76, 10], [1, 10], [35, 3], [39, 5], [69, 10], [83, 8],
                       [21, 6], [22, 6], [50, 1], [2, 9], [29, 10], [60, 1], [38, 7], [103, 1], [67, 10], [33, 6],
                       [57, 8], [9, 4], [40, 6], [75, 5], [65, 3], [31, 1], [91, 7], [26, 10], [7, 8], [43, 9],
                       [100, 10], [16, 8], [92, 1], [33, 3], [31, 9], [84, 10], [82, 6], [88, 4], [60, 2], [78, 1],
                       [15, 5], [89, 1], [51, 8], [34, 1], [90, 7], [40, 8], [17, 2], [48, 7], [27, 3], [64, 6],
                       [52, 7], [66, 10], [96, 6], [1, 3], [51, 6], [57, 9], [36, 7], [16, 4], [96, 5], [93, 10],
                       [24, 5], [51, 1], [19, 1], [87, 3], [48, 5], [30, 10], [30, 7], [41, 8], [89, 9], [32, 6],
                       [21, 7], [4, 10], [49, 8], [45, 9], [27, 4], [81, 7], [40, 5], [56, 5], [100, 2], [1, 5],
                       [11, 4], [64, 4], [62, 8], [103, 2], [91, 8], [103, 3], [38, 2], [78, 5], [98, 3], [60, 7],
                       [47, 8], [28, 9], [19, 8], [35, 6], [24, 2], [22, 8], [68, 10], [46, 8], [49, 10], [45, 4],
                       [26, 3], [31, 7], [77, 2], [95, 8], [12, 3], [15, 6], [42, 4], [104, 9], [25, 10], [44, 4],
                       [74, 5], [19, 9], [31, 3], [2, 2], [76, 6], [45, 2], [27, 2], [9, 9], [43, 10], [103, 6],
                       [12, 2], [80, 1], [77, 5], [4, 8], [44, 8], [5, 1], [33, 9], [27, 10], [30, 3], [33, 4], [4, 5],
                       [61, 2], [102, 4], [11, 10], [28, 3], [81, 10], [6, 2], [43, 1], [19, 10], [97, 6], [14, 7],
                       [23, 7], [62, 1], [79, 9], [3, 10], [18, 2], [87, 1], [35, 9], [48, 6], [32, 5], [81, 4],
                       [83, 1], [38, 1], [59, 10], [90, 4], [64, 9], [51, 4], [5, 10], [14, 8], [6, 8], [92, 9],
                       [60, 10], [38, 3], [47, 6], [72, 3], [29, 7], [82, 7], [85, 4], [34, 6], [56, 7], [81, 3],
                       [16, 3], [102, 10], [94, 1], [1, 9], [63, 7], [59, 1], [61, 10], [28, 10], [65, 10], [33, 7],
                       [31, 6], [43, 8], [33, 2], [55, 7], [31, 8], [5, 5], [7, 7], [63, 2], [36, 4], [42, 10],
                       [10, 10], [34, 3], [104, 5], [89, 8], [80, 6], [65, 6], [17, 1], [30, 9], [4, 1], [55, 9],
                       [54, 3], [58, 3], [54, 7], [46, 10], [69, 3], [11, 8], [50, 3], [41, 1], [53, 2], [35, 7],
                       [73, 2], [22, 1], [96, 10], [52, 5], [67, 1], [44, 6], [10, 7], [86, 1], [12, 10], [39, 10],
                       [92, 2], [87, 5], [63, 4], [27, 8], [6, 10], [40, 4], [76, 4], [31, 10], [9, 8], [34, 4],
                       [26, 7], [10, 3], [101, 9], [69, 4], [3, 6], [46, 7], [41, 5], [14, 2], [87, 4], [4, 4], [55, 5],
                       [13, 10], [5, 2], [33, 1], [11, 2], [38, 10], [103, 7], [49, 1], [53, 6], [68, 8], [6, 5],
                       [5, 6], [66, 5], [97, 1], [7, 1], [16, 5], [10, 9], [19, 2], [26, 8], [80, 7], [82, 5], [28, 4],
                       [87, 8], [44, 5], [69, 6], [21, 5], [56, 2], [43, 3], [86, 10], [37, 2], [94, 5], [54, 5],
                       [58, 4], [86, 2], [44, 9], [98, 6], [18, 10], [87, 10], [61, 3], [7, 2], [26, 2], [25, 9],
                       [96, 7], [66, 8], [27, 7], [28, 5], [65, 7], [82, 4], [40, 10], [46, 9], [20, 7], [29, 6],
                       [70, 3], [66, 3], [52, 2], [3, 9], [96, 4], [10, 4], [102, 6], [75, 4], [29, 1], [104, 8],
                       [14, 3], [54, 8], [7, 3], [55, 10], [4, 7], [2, 5], [89, 4], [67, 8], [73, 9], [9, 2], [14, 4],
                       [27, 1], [104, 10], [58, 9], [6, 9], [56, 6], [69, 1]]
    )
    assert result == 3

    result = solution.maxNumberOfFamilies(
        n=3,
        reservedSeats=[[1, 2], [1, 3], [1, 8], [2, 6], [3, 1], [3, 10]]
    )
    assert result == 4

    result = solution.maxNumberOfFamilies(
        n=2, reservedSeats=[[2, 1], [1, 8], [2, 6]]
    )
    assert result == 2

    result = solution.maxNumberOfFamilies(
        n=4, reservedSeats=[[4, 3], [1, 4], [4, 6], [1, 7]]
    )
    assert result == 4


if __name__ == "__main__":
    tests()

    print("good")
